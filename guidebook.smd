% [HOL Guidebook][Guidebook]

Introduction
-------------

HOL stands for higher-order logic. HOL is also the name of a theorem prover,
the [HOL theorem prover][HOL website]. This is a guidebook for the theorem
prover.

I assume you are familiar with [functional programming][w:fp] and [higher-order
logic][7]. (If you are not, don't worry, these topics will be treated gently
and are easy to pick up.) The main point of this tutorial is to show you how to
build theories in the HOL theorem prover, assuming you have an idea of what you
want to formalise and how to prove your theorems mathematically.

If you have trouble with anything, there is plenty of community support
available including mailing lists and online chat. See the [HOL website][]
for details.

For support on or contributions to this guidebook itself, see its repository on
[GitHub][Guidebook].

[HOL website]: https://hol-theorem-prover.org
[Guidebook]: https://github.com/HOL-Theorem-Prover/hol-guidebook
[7]: http://www.cas.mcmaster.ca/sqrl/papers/SQRLreport18_rev2.pdf
[w:fp]: https://en.wikipedia.org/wiki/Functional_programming

Installation
-------------
Go to the [HOL website][].
Follow the instructions there to install HOL.

Alternatively, you can follow the first part of the
[CakeML build instructions](https://code.cakeml.org/tree/master/build-instructions.sh).

It is a good idea to set the environment variable `$HOLDIR` to point to the
location of your HOL installation. I will refer to this directory by `$HOLDIR`
from now on.

Running hol
------------
Now you can run `hol` at the command line. You will be greeted with a welcome
message, and prompted with a read-eval-print loop (REPL). This is in fact the
REPL for the underlying ML system.

HOL is just a library for theorem proving in Standard ML (abbreviated as ML).
Interacting with HOL, therefore, can be seen as programming in ML. If you don't
use any of the HOL-specific parts, you just have Standard ML:

     >> 3 + 4;

The HOL additions include new datatypes like `thm`, which represents a proven
theorem. Some values of this type are already in scope:

     >> SKOLEM_THM;

Script files
-------------
Usual practice is not to program directly at the REPL. Instead, you write a
_script file_ which can be processed by a tool called `Holmake` to build a
theory. A typical script file looks like this:

    open HolKernel boolLib bossLib Parse;

    val _ = new_theory"test";

    (* SML declarations  *)
    (* for example: *)
    val th = save_thm("SKOLEM_AGAIN",SKOLEM_THM);

    val _ = export_theory();

The script file above should be saved as `testScript.sml`, because the name passed to `new_theory` is `"test"`.
To produce a theory from this script file, run `Holmake` as follows:

    $ Holmake testTheory.uo

`Holmake` knows to look for `testScript.sml` when given the target `testTheory.uo`.
It will run the script and produce the following files as output:
`testTheory.sig`, `testTheory.sml`, `testTheory.ui`, and `testTheory.uo`.

The `testTheory.sig` file contains a summary of the contents of the generated
theory.  In this case, you will see that `testTheory` contains a single
theorem, which is just a copy of `SKOLEM_THM` saved under the name
`SKOLEM_AGAIN`.

The other generated files are the mechanism by which persistent theories are
implemented on disk, and can be ignored for now.

Interaction
------------
One would like to develop a script file with the same ease as programming at
the REPL. For this, there are plugins for two text editors, Vim and Emacs,
which enable script-file writing alongside an interactive HOL session. Both are
included in your HOL installation. The Vim plugin is documented at
`$HOLDIR/tools/vim/README` ([also here](https://github.com/HOL-Theorem-Prover/HOL/tree/master/tools/vim/README)).
The Emacs plugin is documented [online](https://hol-theorem-prover.org/hol-mode.html). (TODO: update link for new website.)

The idea behind these interaction plugins is to write a script file that will
eventually be suitable for processing by `Holmake`, but to see, step-by-step in
the REPL, what is happening at each point of the script file as you are writing
it.

As an example, let's try the Vim plugin on the `testScript.sml` file from
above. First, install the Vim plugin by following the instructions in its
`README`. Next, open `testScript.sml` in Vim, and also start `hol`. I usually
put these two windows (`hol` and `vim`) side by side, so I can see what is
happening in both at once.

We begin processing from the top of the file. Select the first line (the one
containing `open`). (To select a line in `vim`, position the cursor on the line
and press `V`.) Tell `hol` to load those theories and libraries by typing `hl`.
You should see some output like:

    HOLLoadSendQuiet HolKernel boolLib bossLib Parse completed

Next, move down to the line containing `save_thm` and send it to `hol` by
typing `hs`. You should see some output like:

    >>- val th = save_thm("SKOLEM_AGAIN",SKOLEM_THM);

You can, at this point, also write directly into the REPL if you want.
For example, to see that this theorem has no hypotheses, try:

    >> hyp th;

But of course, if you want to add anything to the theory you produce, you
should write it in the script file.

Types
------
The syntax of higher-order logic includes types and terms. These are two of the
main datatypes implemented by HOL, over and above what is provided by ML. Here
is a type:

    >> bool;

In fact, `bool` is one of a handful of types that are bound to ML variables by
default. In general, you can make a type by providing the name of a type
operator and a list of arguments:

    >> mk_type("bool",[]);

    >> mk_type("list",[bool]); (* the type of a list of Booleans *)

Type variables can also be made by providing a name.

    >> mk_vartype("'test");

    >> mk_vartype("'f");

Type variable names, by convention, start with a single quote, unless they are a Greek letter.
The first several letters of the (Roman) alphabet are synonymous with certain Greek letters (as demonstrated above).

Every type in HOL is either a type variable or a type operator (like "list") applied to type arguments.
Even `bool` is a type operator; it has no arguments.

Parsing
--------
It is often more convenient to call the _type parser_ rather than `mk_type` directly.

    >> ``:num list``;

The backticks (\`) above are special syntax provided by HOL for calling the
type parser. The underlying parser function is called `Type`. We can call the
parser more directly:

    >> Type `:num list`;

The single backticks represent another special syntax, this time for a
_quotation_. Removing the special syntax entirely, we can write:

    >> Type [QUOTE":num list"];

The string passed to the type parser should start with a colon as above.

Types can include variables. `alpha` is bound to a type variable, which can also be written as `:'a`.

    >> alpha; ``:'a``;

Quotations can include values that do not need to be parsed. For example:

    >> val num = ``:num``;
    >> ``:^num list``;

    >> ``:^(mk_type("list",[alpha])) list``; (* list of lists of alphas *)

The last input expression is syntactic sugar for:

    >> Type [QUOTE":", ANTIQUOTE (mk_type("list",[alpha])), QUOTE " list"];

Terms
------
The terms of higher-order logic include: variables, constants, abstractions, and
combinations (sometimes called applications).
I will show examples of all these kinds of terms, made both using term-making
functions directly and using the term parser.

#### Variables
A variable is identified by a name and a type.
    >> val x = mk_var("x",beta);

    >> val x = ``x:β``; (* or ``x:'b`` *)

If you don't provide a type, HOL will invent one.

    >> val y = ``y``;

Variables are equal if and only if both their name and type match.

    >> y = ``y:'b``;

    >> y = mk_var("y",alpha);

#### Constants
A constant also has a name and a type.

    >> val z = mk_const("0",``:num``);

    >> val z = ``0``;

Unlike variables, the type of a constant is fixed.

    >>+ mk_const("0",bool);

So why provide a type at all? Because constants can be _polymorphic_.
More details about polymorphism [below][polymorphism].

Furthermore, unlike variable names, constant names are scoped into theories.
More details about theories [later][theories].
The full name of a constant can be recovered with `dest_thy_const`.

    >> dest_thy_const z;

#### Abstractions
An abstraction represents a function.
It consists of a variable and a term (body).

    >> val f = mk_abs(x,z);

    >> val f = ``λx:β. 0``; (* or ``\x:'b. 0`` *)

    >> dest_abs f;

Terms can be tested for _alpha-equivalence_, which means equality up to a renaming of bound variables, using `aconv`.

    >> aconv f (mk_abs(y,z));

    >> val y' = mk_var("y",beta);

    >> aconv f (mk_abs(y',z));

To see why the first version is false, recall the type of `y` declared above.

    >> dest_var y;

A more interesting example:

    >> val f1 = ``λx y. ¬x``;

    >> val f2 = ``λy x. ¬x``;

    >> val f3 = ``λy x. ¬y``;

    >> aconv f1 f2;
    >> aconv f1 f3;

The syntax `λx y. b` is shorthand for `λx. (λy. b)`.

In `f1`, the type of `y` is invented, but the type of `x` is fixed (as `:num`) by _type inference_.
The Boolean negation operator (`¬`) takes a Boolean argument, so HOL infers that its argument must have type `:bool`.

Alpha-equivalence is less discriminating than equality.

    >> f1 = f3;

#### Combinations
A combinations represents application of a function to an argument.

    >> mk_comb(f,y');

The syntax is simply juxtaposition of function with argument.

    >> ``f y``;

The type of the argument must match the domain of the function's type.

    >>+ mk_comb(f,y);

Every function in HOL takes one argument, but multiple arguments can be implemented using higher-order functions by [_currying_](https://en.wikipedia.org/wiki/Currying).

    >> val fxyz = ``f x y z``;

    >> dest_comb fxyz;

All the arguments can be stripped off at once.

    >> strip_comb fxyz;

Boolean connectives
--------------------
There are two canonical values of type `:bool`, namely true and false.
In HOL they are written as `T` and `F`, and are also bound by default to ML variables.

    >> T;

    >> ``F`` = F;

    >> type_of F;

The ML function `type_of`, used above, returns the HOL type of a term.

    >> type_of;

The connectives of Boolean logic can be written using either ASCII or Unicode syntax.
Here are examples using both styles.

    >> ``~p``;

    >> ``p /\ q``;

    >> ``p ∨ q``;

    >> ``x ==> y``;

    >> ``x ⇔ y``;

Unicode
--------

If you are using Vim, the Vim plugin (see [Interaction]) documentation explains how to type Unicode characters using digraphs.
HOL always prints output back using Unicode, but you can turn this off if desired.

    >> set_trace "Unicode" 0;

    >> val tm1 = ``x <=> y``;

    >> val tm2 = ``x ⇔ y``;

    >> set_trace "Unicode" 1;

    >> tm1;

Observe that `tm2` actually contains a variable called `⇔`, which is printed with a leading `$` when Unicode is turned on to avoid conflicting with the bi-implication constant (`<=>`).

    >> tm2;

    >> dest_comb tm2;

    >> tm2 |> dest_comb |> #1 |> dest_comb;

    >> is_var (#2 it);

The examples above also introduce a few ML library functions we have not seen before.
The `|>` combinator simply does function application. `tm2 |> dest_comb` is the same as `dest_comb tm2`.
Its utility in adding readabilty (and avoiding parentheses) when applying many functions can be seen above.
The `#1` and `#2` functions are record selectors for elements of tuples in ML.
In HOL they they are also defined as `fst` and `snd`.

    >> fst (0,1);

    >> (0,1,2) |> #3;


First-order logic
------------------

Polymorphism
-------------

Theorems
---------

Finding theorems
-----------------------

Evaluation
-----------

Theories
---------
Every type operator (like `list`) above is defined in some _theory_, in this
case in `listTheory`. The fully-qualified name of the type operator is
`list$list`. We could

Simple proofs
--------------

Useful tactics
---------------

Finding documentation
----------------------

System conventions
-------------------

Standard theories
------------------

Defining constants
------------------

Defining datatypes
------------------

Induction
----------

Conversions
------------

The simplifier
---------------

Defining relations
-------------------

The type database
------------------

Defining quotients
-------------------

Changing the parser
--------------------

Writing more tactics
--------------------

More proofs
------------
